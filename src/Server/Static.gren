module Server.Static exposing ( Mode(..), Config, response, responseWithNotFound )

{-| Serve static files from a provided directory

@docs Config, Mode, response, responseWithNotFound

-}

import Bytes exposing ( Bytes )
import Bytes.Decode
import FileSystem
import FileSystem.FileHandle
import FileSystem.Path
import HttpServer.Response
import HttpServer.Response exposing ( Response )
import MimeType
import Task exposing ( Task )
import Url exposing ( Url )


{-| The `Mode` dictates what files will be searched for and in what order. Modes are meant to 
support common use-cases without any configuration. If there's a use-case this does not 
support, leave feedback on Github!

#### `Normal` Mode

`Normal` mode attempts to find a file with the exact path given. If a file is not found, it 
fails with a 404 `Response`.

#### `SinglePageApp` Mode

`SinglePageApp` mode attempts to find the file on the given path. If it fails, it looks for an
`index.html` file at the root of the static file directory and returns it instead. If there
is no such file, it fails and with a 404 `Response`. 

As the mode name suggests, this allows for serving single-page apps which have a single 
`index.html` file for the entire application and want to route most (if not all) traffic
through it.

#### `PrettyUrl` Mode

`PrettyUrl` mode attempts to find the file on the given path. If it fails, append `index.html`
to the given path to try and find that file. If this fails, return a 404 `Response`.

This mode supports many static-site generators who generate urls like `about/index.html` rather than
`about.html` for each generated file.

-}
type Mode
    = Normal
    | SinglePageApp
    | PrettyUrl


{-| Configuration options required to find files and generate responses.

- `fileSystemPermission` is the permission you get from the `FileSystem` module of the 
`gren-lang/node` package for accessing the file system. This module needs read access to
the file system to get any requested files.
- `httpResponse` is the `Response` type you get from the `HttpResponse` module of the 
`gren-lang/node` package. This is required for this module to construct and return an 
HTTP `Response`.
- `directory` is the directory that will be looked into to find any requested files. This
module will only search the file system for files in this directory.
- `mode` describes how this module will search for and find static files. Check out the docs
for the `Mode` type for more details.
-}
type alias Config =
    { fileSystemPermission : FileSystem.Permission
    , httpResponse : HttpServer.Response.Response
    , directory : String
    , mode : Mode
    }


{-| Read a file from disk as `Bytes`. 
-}
readFileAsBytes : FileSystem.Permission -> FileSystem.Path.Path -> Task FileSystem.Error Bytes
readFileAsBytes fsPermission fileName =
    FileSystem.FileHandle.openForRead fsPermission fileName
        |> Task.andThen FileSystem.FileHandle.read


{-| Take the passed path (and an optional modifier), try to find a file at that path, and 
produce a `Response` if it can be found.
-}
staticFileResponse : Config -> FileSystem.Path.Path -> Task FileSystem.Error Response
staticFileResponse { directory, httpResponse, fileSystemPermission } path =
    let
        {- The derived mime type of the file located at `path` (if any)
        -}
        mimeType : String
        mimeType =
            MimeType.lookup path.extension
    in
    readFileAsBytes fileSystemPermission path
        |> Task.map
                (\body ->
                    -- If it succeeds, produce a 200 (OK) response with the body set to 
                    -- the found files contents (as `Bytes`)
                    httpResponse
                        |> HttpServer.Response.setHeader "Content-Type" mimeType
                        |> HttpServer.Response.setStatus 200
                        |> HttpServer.Response.setBodyAsBytes body
                )


{-| Try to get a file from a folder given a passed `Url`.

This function takes a `Url` and uses its path to know what file to look for. This decision
makes it simple to integrate with received requests from the `HttpServer` module of the
`gren/node` package.

When the task is successful, this function will produce a `Response` that contains the 
requested files contents as a `String`. If the task fails, it will produce an error.
-}
response : Config -> Url -> Task FileSystem.Error Response
response config url =
    responseHelper config (FileSystem.Path.fromPosixString url.path)


{-| Try to get a file from a folder given a passed `Url`.

This function just maps the error produced by the `response` function, ignores is, and
uses a 404 response in its place. It's implementation is simple and can be copied or
modified to suite your needs.

    response config url
        |> Task.mapError (\_ -> HttpServer.Response.setStatus 404 config.httpResponse)
-}
responseWithNotFound : Config -> Url -> Task Response Response
responseWithNotFound config url =
    response config url
        |> Task.mapError (\_ -> HttpServer.Response.setStatus 404 config.httpResponse)


{-| This function does all the work.
-}
responseHelper : Config -> FileSystem.Path.Path -> Task FileSystem.Error Response
responseHelper config passedPath =
    let
        redirect : FileSystem.Path.Path -> HttpServer.Response.Response -> HttpServer.Response.Response
        redirect path res =
            HttpServer.Response.setStatus 308 res
                |> HttpServer.Response.setHeader "Location" (FileSystem.Path.toPosixString path)

        indexPath : FileSystem.Path.Path
        indexPath =
            FileSystem.Path.append (FileSystem.Path.fromPosixString "/index.html") (FileSystem.Path.fromPosixString config.directory)

        pathWithStaticDirectory : FileSystem.Path.Path
        pathWithStaticDirectory = 
            FileSystem.Path.prepend (FileSystem.Path.fromPosixString config.directory) passedPath
    in
    when 
        { mode = config.mode
        , extension = passedPath.extension
        , fileName = FileSystem.Path.filenameWithExtension passedPath 
        } 
    is
        { mode = Normal, extension, fileName } ->
            -- In `Normal` mode, just try to find the passed path without any modifications 
            -- or fallbacks. Just fail if the file can't be found.
            staticFileResponse config pathWithStaticDirectory

        { mode = PrettyUrl, extension = "", fileName } ->
            -- In `PrettyUrls` mode, when there is directory being looked for (not a file), try to
            -- find the `index.html` file within that directory
            staticFileResponse config (FileSystem.Path.prepend (FileSystem.Path.fromPosixString config.directory) (FileSystem.Path.append (FileSystem.Path.fromPosixString "index.html") passedPath))
        
        { mode = PrettyUrl, extension, fileName = "index.html" } ->
            -- In `PrettyUrls` mode, when you're trying to access an index.html file and that file
            -- exists, redirect the directory rather than the index.html file itself
            when FileSystem.Path.parentPath passedPath is
                Just path ->
                    Task.map (redirect path) (staticFileResponse config pathWithStaticDirectory)
                
                Nothing ->
                    Task.map (redirect (FileSystem.Path.fromPosixString "/")) (staticFileResponse config pathWithStaticDirectory)

        { mode = PrettyUrl, extension, fileName } ->
            -- In `PrettyUrls` mode, when there is a filename being looked for, just try to find
            -- the file name and return it or otherwise fail!
            staticFileResponse config pathWithStaticDirectory

        { mode = SinglePageApp, extension = "", fileName } ->
            -- In `SinglePageApp` mode when there is not a file being looked for, just return the
            -- root `index.html` file if it exists.
            staticFileResponse config indexPath

        { mode = SinglePageApp, extension, fileName = "index.html" } ->
            -- In `SinglePageApp` mode, when you're trying to access the `index.html` file at the
            -- root and that file exists, redirect the browser to the root
            staticFileResponse config FileSystem.Path.empty

        { mode = SinglePageApp, extension, fileName } ->
            -- In `SinglePageApp` mode when a specific file is being looked for, try to find it
            -- and otherwise try to serve the root index.html file and fail if that index.html
            -- file does not exist.
            staticFileResponse config pathWithStaticDirectory
                |> Task.onError (\_ -> responseHelper config FileSystem.Path.empty)
